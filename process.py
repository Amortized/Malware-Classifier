import sys;
import glob;
from multiprocessing import Pool;
import time;
import gzip;

def readLabels(myfile):
  '''
    Generates a dict of labels
  '''
  labels = {};
  try :
    with open(myfile, "r") as f:
      next(f);
      for line in f:
        t = line.strip().split(',');
        labels[t[0].replace("\"", "")] = t[1];
  except :
    print("No files found ./data/");
    exit(1);
    
  return labels;
   
def genSignature(myfile):
  '''
     Combine all the hex code into one record
  '''
  try :
    lines = [line.strip().split()[1:] for line in open(myfile)]
  except :
    print("No files found ./data/");
    exit(1);

  #Signature
  signature = [];
  for line in lines:
    signature.extend(line);
 
  return signature;

def process(myfile, label):
  '''
     Generates signature and writes to a file
  '''

  signature = genSignature(myfile);

  with gzip.open(myfile+".signature.gz", "wb") as f:
    for s in signature:
      f.write(s + ",");

    f.write(label);
    f.write("\n");
     

def process_wrapper(args):
  process(*args);


if __name__ == '__main__':

  bytes_files =  glob.glob("./data/*.bytes");
  label_file  =  "./data/trainLabels.csv";

  start = time.time();

  labels  = readLabels(label_file);
  pool    = Pool();

  try :
    params  = [(b_f, labels[b_f.replace(".bytes","").replace("./data/","")]) for b_f in bytes_files];
  except :
    pass

  results = pool.map( process_wrapper, params );

  pool.close();
  pool.join();

  print 'total runtime = {0}'.format(time.time() - start);
